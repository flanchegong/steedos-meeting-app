name: meeting
label: 会议
icon: event
enable_search: true
fields:
  room:
    label: 会议室
    type: lookup
    reference_to: meetingroom
    is_wide: true
    required: true
    reference_sort:
      name: 1
    reference_limit: 20
    optionsFunction: !!js/function |
      function (values) {
              var options, result, rooms;
              result = [];
              options = {
                $orderby: 'name',
                $select: 'enable_open,admins,name'
              };
              rooms = Creator.odata.query('meetingroom', options, true);
              rooms.forEach(function (room) {
                var ref;

                if ((room != null ? (ref = room.admins) != null ? ref.indexOf(Meteor.userId()) : void 0 : void 0) > -1 || (room != null ? room.enable_open : void 0) || Steedos.isSpaceAdmin()) {
                  return result.push({
                    label: room.name,
                    value: room._id
                  });
                }
              });
              return result;
            }
    sortable: true
    name: room
    filterable: true
  start:
    label: 开始时间
    type: datetime
    required: true
    defaultValue: !!js/function |
      function () {
              var now, reValue;
              now = new Date();
              reValue = new Date(now.getTime() + 1 * 60 * 60 * 1000);
              reValue.setMinutes(0);
              reValue.setSeconds(0);
              return reValue;
            }
    sortable: true
    name: start
  end:
    label: 结束时间
    type: datetime
    required: true
    defaultValue: !!js/function |
      function () {
              var now, reValue;
              now = new Date();
              reValue = new Date(now.getTime() + 2 * 60 * 60 * 1000);
              reValue.setMinutes(0);
              reValue.setSeconds(0);
              return reValue;
            }
    name: end
  name:
    label: 会议标题
    type: text
    is_wide: true
    required: true
    name: name
    searchable: true
  unit:
    label: 参会单位
    type: text
    defaultValue: !!js/function |
      function () {
              var collection, organziation;
              collection = Creator.Collections["organizations"];
              organziation = collection.findOne({
                users: Meteor.userId(),
                space: Session.get("spaceId")
              }, {
                fields: {
                  name: 1
                }
              }).name;
              return organziation;
            }
    sortable: true
    name: unit
  count:
    label: 参会人数
    type: number
    name: count
  phone:
    label: 联系方式
    type: text
    defaultValue: !!js/function |
      function () {
              var collection, mobile;
              collection = Creator.Collections["space_users"];
              mobile = collection.findOne({
                user: Meteor.userId(),
                space: Session.get("spaceId")
              }, {
                fields: {
                  mobile: 1
                }
              }).mobile;
              return mobile;
            }
    name: phone
  features:
    label: 用品需求
    type: select
    options:
      - label: 上网
        value: surfing
      - label: 投影
        value: projection
      - label: 视频
        value: vedio
      - label: 会标
        value: monogram
    multiple: true
    name: features
    filterable: true
  description:
    label: 备注
    type: textarea
    is_wide: true
    name: description
  owner:
    name: owner
    hidden: true
calendar:
  textExpr: name
  startDateExpr: start
  endDateExpr: end
  groups:
    - room
list_views:
  all:
    label: 列表
    columns:
      - name
      - start
      - unit
      - room
      - count
      - owner
      - phone
      - features
    filter_scope: space
  calendar:
    label: 日历
    columns:
      - name
      - start
      - end
    filter_scope: space
permission_set:
  user:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: true
  admin:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true
  member:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: true
  guest:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: true
triggers:
  before_insert_server_event:
    'on': server
    when: before.insert
    todo: !<tag:yaml.org,2002:js/function> |-
      function (userId, doc) {
              var clashs;

              var clashRemind = function(_id, room, start, end) {
                  var meetings;
                  console.log("start====end===", start, end);
                  meetings = Creator.getCollection("meeting").find({
                    _id: {
                      $ne: _id
                    },
                    room: room,
                    $or: [
                      {
                        start: {
                          $lte: start
                        },
                        end: {
                          $gt: start
                        }
                      }, {
                        start: {
                          $lt: end
                        },
                        end: {
                          $gte: end
                        }
                      }, {
                        start: {
                          $gte: start
                        },
                        end: {
                          $lte: end
                        }
                      }
                    ]
                  }).fetch();
                  return meetings != null ? meetings.length : void 0;
                };

              if (doc.end <= doc.start) {
                throw new Meteor.Error(500, "开始时间需小于结束时间");
              }

              clashs = clashRemind(doc._id, doc.room, doc.start, doc.end);

              if (clashs) {
                throw new Meteor.Error(500, "该时间段的此会议室已被占用");
              }
            }
  before_update_server_event:
    'on': server
    when: before.update
    todo: !<tag:yaml.org,2002:js/function> |-
      function (userId, doc, fieldNames, modifier, options) {
              var clashs, end, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, room, start;

              if ((modifier != null ? (ref = modifier.$set) != null ? ref.start : void 0 : void 0) || (modifier != null ? (ref1 = modifier.$set) != null ? ref1.end : void 0 : void 0)) {
                start = modifier != null ? (ref2 = modifier.$set) != null ? ref2.start : void 0 : void 0;
                end = modifier != null ? (ref3 = modifier.$set) != null ? ref3.end : void 0 : void 0;
              }

              if (!(modifier != null ? (ref4 = modifier.$set) != null ? ref4.start : void 0 : void 0)) {
                start = doc.start;
              }

              if (!(modifier != null ? (ref5 = modifier.$set) != null ? ref5.end : void 0 : void 0)) {
                end = doc.end;
              }

              if (end <= start) {
                throw new Meteor.Error(500, "开始时间不能大于结束时间");
              }

              if (modifier != null ? (ref6 = modifier.$set) != null ? ref6.room : void 0 : void 0) {
                room = modifier != null ? (ref7 = modifier.$set) != null ? ref7.room : void 0 : void 0;
              } else {
                room = doc.room;
              }

              var clashRemind = function(_id, room, start, end) {
                  var meetings;
                  console.log("start====end===", start, end);
                  meetings = Creator.getCollection("meeting").find({
                    _id: {
                      $ne: _id
                    },
                    room: room,
                    $or: [
                      {
                        start: {
                          $lte: start
                        },
                        end: {
                          $gt: start
                        }
                      }, {
                        start: {
                          $lt: end
                        },
                        end: {
                          $gte: end
                        }
                      }, {
                        start: {
                          $gte: start
                        },
                        end: {
                          $lte: end
                        }
                      }
                    ]
                  }).fetch();
                  return meetings != null ? meetings.length : void 0;
                };

              clashs = clashRemind(doc._id, room, start, end);

              if (clashs) {
                throw new Meteor.Error(500, "该时间段的此会议室已被占用");
              }
            }